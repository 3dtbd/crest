// Crest Ocean System

// This file is subject to the MIT License as seen in the root of this folder structure (LICENSE)

// An implementation of the Jump Flood algorithm by Rong and Tan
// Source: https://www.comp.nus.edu.sg/~tants/jfa.html

#pragma kernel JumpFlood

uint _jumpSize;
uint _textureDimension;

Texture2D<float4>   _FromTexture;
RWTexture2D<float4> _ToTexture;


[numthreads(8,8,1)]
void JumpFlood(uint3 id : SV_DispatchThreadID)
{
	float4 result = _FromTexture[id.xy];
	float resultRight = _textureDimension  - _jumpSize > id.x ? _FromTexture[id.xy + uint2(_jumpSize, 0)].y + _jumpSize : result.y;
	float resultUp    = _textureDimension  - _jumpSize > id.y ? _FromTexture[id.xy + uint2(0, _jumpSize)].y + _jumpSize : result.y;
	float resultLeft  = id.x >= _jumpSize                     ? _FromTexture[id.xy - uint2(_jumpSize, 0)].y + _jumpSize : result.y;
	float resultDown  = id.y >= _jumpSize                     ? _FromTexture[id.xy - uint2(0, _jumpSize)].y + _jumpSize : result.y;

	result.y = min(
		min(
			min(
				resultRight,
				resultUp
			),
			min(
				resultDown,
				resultLeft
			)
		),
		result.y
	);
	_ToTexture[id.xy] = result;
}
