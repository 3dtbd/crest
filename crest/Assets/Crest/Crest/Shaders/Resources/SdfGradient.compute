// Crest Ocean System

// This file is subject to the MIT License as seen in the root of this folder structure (LICENSE)

// An implementation of the Jump Flood algorithm by Rong and Tan
// Source: https://www.comp.nus.edu.sg/~tants/jfa.html

#pragma kernel SdfGradient

uint _textureDimension;

Texture2D<float4>   _FromTexture;
RWTexture2D<float4> _ToTexture;


[numthreads(8,8,1)]
void SdfGradient(uint3 id : SV_DispatchThreadID)
{
	float4 result = _FromTexture[id.xy];

	float sdfRight = _textureDimension  - 1 > id.x ? _FromTexture[id.xy + uint2(1, 0)].y : result.y + 1;
	float sdfUp    = _textureDimension  - 1 > id.y ? _FromTexture[id.xy + uint2(0, 1)].y : result.y + 1;
	float sdfLeft  = id.x >= 1                     ? _FromTexture[id.xy - uint2(1, 0)].y : result.y + 1;
	float sdfDown  = id.y >= 1                     ? _FromTexture[id.xy - uint2(0, 1)].y : result.y + 1;

	// TODO(TRC):Now make sure these are aligned correctly in world space...
	float gradXWS = (sdfRight - sdfLeft) * 0.5;
	float gradZWS = (sdfUp - sdfDown)    * 0.5;

	result.z = gradXWS;
	result.w = gradZWS;
	_ToTexture[id.xy] = result;
}
